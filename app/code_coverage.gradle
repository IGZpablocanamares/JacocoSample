apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
	toolVersion = "0.8.1"
}

tasks.withType(Test) {
	jacoco.includeNoLocationClasses = true
}

task codeCoverage(type: JacocoReport, dependsOn: [':core:codeCoverage',
												  ':coreDeps:codeCoverage',
												  ':coresupport:codeCoverage',
												  'testDebugUnitTest',
												  'createDebugCoverageReport']) {
	group = "Reporting"
	description = "Generate Jacoco coverage reports for Debug build"
	
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled = true
		html.destination file("${rootProject.rootDir}/code-coverage")
	}
	
	// what to exclude from coverage report
	// UI, "noise", generated classes, platform classes, etc.
	def excludes = [
		'**/R.class',
		'**/R$*.class',
		'**/*$ViewInjector*.*',
		'**/BuildConfig.*',
		'**/Manifest*.*',
		'**/*Test*.*',
		'android/**/*.*'
	]
	// generated classes
	classDirectories = fileTree(
		dir: "${buildDir}/intermediates/classes/debug",
		excludes: excludes
	) + fileTree(
		dir: "${buildDir}/tmp/kotlin-classes/debug",
		excludes: excludes
	) + fileTree(
		dir: "${rootProject.rootDir}/core/build/classes",
		excludes: excludes
	) + fileTree(
		dir: "${rootProject.rootDir}/coreDeps/build/classes",
		excludes: excludes
	) + fileTree(
		dir: "${rootProject.rootDir}/coresupport/build/intermediates/classes/debug",
		excludes: excludes
	) + fileTree(
		dir: "${rootProject.rootDir}/coresupport/build/tmp/kotlin-classes/debug",
		excludes: excludes
	)
	
	// sources
	def coverageSourceDirs = [
		android.sourceSets.main.java.srcDirs,
		"$rootProject.rootDir/core/src/main",
		"$rootProject.rootDir/coreDeps/src/main",
		"$rootProject.rootDir/coresupport/src/main"
	]
	additionalSourceDirs = files(coverageSourceDirs)
	sourceDirectories = files(coverageSourceDirs)
	executionData = fileTree(dir: rootProject.rootDir, includes: ['**/*.exec', '**/*.ec'])
	
}